{"version":3,"sources":["TrainerDateValidator-spec.js"],"names":[],"mappings":"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","file":"TrainerDateValidator-spec-compiled.js","sourcesContent":["describe(\"DateLocationValidator\", function()\r\n{\r\n    it(\"Passes when null appointment array is passed\",function(){\r\n        let validator  = new TrainerDateValidator(null);\r\n        let result = new validator.validate(new AppointmentViewModel());\r\n        expect(result.outcome).toBe(true);\r\n    });\r\n\r\n    it(\"Passes when null appointment array is length 0\",function(){\r\n        let validator  = new TrainerDateValidator([]);\r\n        let result = new validator.validate(new AppointmentViewModel());\r\n        expect(result.outcome).toBe(true);\r\n    });\r\n\r\n    describe('When the trainer is not working same date',function() {\r\n\r\n        it(\"Passes when appointment clashes exactly\", function () {\r\n            try {\r\n                let appointments = [new AppointmentViewModel(1, new Date(2015, 1, 1), new Date(2015, 1, 2))];\r\n                let validator = new TrainerDateValidator(appointments);\r\n                let appointmentViewmodel = new AppointmentViewModel(1, new Date(2015, 1, 1), new Date(2015, 1, 2));\r\n                let result = validator.validate(appointmentViewmodel);\r\n                expect(result.outcome).toBe(true);\r\n            }\r\n            catch (excep) {\r\n                console.log(excep)\r\n                expect(true).toBe(false);\r\n            }\r\n        });\r\n\r\n        it(\"Passes when appointment clashes exactly- with time, for same location\", function () {\r\n            try {\r\n                let appointments = [new AppointmentViewModel(1, new Date(2015, 1, 1, 8, 30, 0), new Date(2015, 1, 2, 17, 30, 0))];\r\n                let validator = new TrainerDateValidator(appointments);\r\n                let appointmentViewmodel = new AppointmentViewModel(1, new Date(2015, 1, 1, 8, 30, 0), new Date(2015, 1, 2, 17, 30, 0));\r\n                let result = validator.validate(appointmentViewmodel);\r\n                expect(result.outcome).toBe(true);\r\n            }\r\n            catch (excep) {\r\n                console.log(excep)\r\n                expect(true).toBe(false);\r\n            }\r\n        });\r\n\r\n\r\n        it(\"Passes when appointment falls within existing - both bounds, for same location\", function () {\r\n            try {\r\n                let appointments = [new AppointmentViewModel(1, new Date(2015, 1, 1, 8, 30, 0), new Date(2015, 1, 2, 17, 30, 0))];\r\n                let validator = new TrainerDateValidator(appointments);\r\n                let appointmentViewmodel = new AppointmentViewModel(1, new Date(2015, 1, 1, 9, 30, 0), new Date(2015, 1, 2, 16, 30, 0));\r\n                let result = validator.validate(appointmentViewmodel);\r\n                expect(result.outcome).toBe(true);\r\n            }\r\n            catch (excep) {\r\n                console.log(excep)\r\n                expect(true).toBe(false);\r\n            }\r\n        });\r\n    });\r\n\r\n\r\n    describe('When the trainer is working same date',function() {\r\n        it(\"Fails when appointment clashes exactly\", function () {\r\n            try {\r\n                let appointments = [new AppointmentViewModel(1, new Date(2015, 1, 1), new Date(2015, 1, 2))];\r\n                let validator = new TrainerDateValidator(appointments);\r\n                let appointmentViewmodel = new AppointmentViewModel(1, new Date(2015, 1, 1), new Date(2015, 1, 2));\r\n                let result = validator.validate(appointmentViewmodel);\r\n                expect(result.outcome).toBe(false);\r\n            }\r\n            catch (excep) {\r\n                console.log(excep)\r\n                expect(true).toBe(false);\r\n            }\r\n        });\r\n\r\n        it(\"Fails when appointment clashes exactly- with time, for same trainer\", function () {\r\n            try {\r\n                let appointments = [new AppointmentViewModel(1, new Date(2015, 1, 1, 8, 30, 0), new Date(2015, 1, 2, 17, 30, 0))];\r\n                let validator = new TrainerDateValidator(appointments);\r\n                let appointmentViewmodel = new AppointmentViewModel(1, new Date(2015, 1, 1, 8, 30, 0), new Date(2015, 1, 2, 17, 30, 0));\r\n                let result = validator.validate(appointmentViewmodel);\r\n                expect(result.outcome).toBe(false);\r\n            }\r\n            catch (excep) {\r\n                console.log(excep)\r\n                expect(true).toBe(false);\r\n            }\r\n        });\r\n\r\n\r\n        it(\"Fails when appointment falls within existing - both bounds, for same trainer\", function () {\r\n            try {\r\n                let appointments = [new AppointmentViewModel(1, new Date(2015, 1, 1, 8, 30, 0), new Date(2015, 1, 2, 17, 30, 0))];\r\n                let validator = new TrainerDateValidator(appointments);\r\n                let appointmentViewmodel = new AppointmentViewModel(1, new Date(2015, 1, 1, 9, 30, 0), new Date(2015, 1, 2, 16, 30, 0));\r\n                let result = validator.validate(appointmentViewmodel);\r\n                expect(result.outcome).toBe(false);\r\n            }\r\n            catch (excep) {\r\n                console.log(excep)\r\n                expect(true).toBe(false);\r\n            }\r\n        });\r\n    });\r\n\r\n});\r\n"]}
{"version":3,"sources":["DateLocationValidator-spec.js"],"names":[],"mappings":";;AAAA,QAAQ,CAAC,uBAAuB,EAAE,YAClC;AACI,MAAE,CAAC,8CAA8C,EAAC,YAAU;AACxD,YAAI,SAAS,GAAI,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC;AACjD,YAAI,MAAM,GAAG,IAAI,SAAS,CAAC,QAAQ,CAAC,IAAI,oBAAoB,EAAE,CAAC,CAAC;AAChE,cAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACrC,CAAC,CAAC;;AAEH,MAAE,CAAC,gDAAgD,EAAC,YAAU;AAC1D,YAAI,SAAS,GAAI,IAAI,qBAAqB,CAAC,EAAE,CAAC,CAAC;AAC/C,YAAI,MAAM,GAAG,IAAI,SAAS,CAAC,QAAQ,CAAC,IAAI,oBAAoB,EAAE,CAAC,CAAC;AAChE,cAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACrC,CAAC,CAAC;;AAEH,MAAE,CAAC,wCAAwC,EAAC,YAAU;AAClD,YAAI;AACA,gBAAI,YAAY,GAAG,CAAC,IAAI,oBAAoB,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7F,gBAAI,SAAS,GAAG,IAAI,qBAAqB,CAAC,YAAY,CAAC,CAAC;AACxD,gBAAI,oBAAoB,GAAG,IAAI,oBAAoB,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACnG,gBAAI,MAAM,GAAG,IAAI,SAAS,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;AAC1D,kBAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtC,CACD,OAAM,KAAK,EAAC;AACR,mBAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;AAClB,kBAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC5B;KACJ,CAAC,CAAC;CACN,CAAC,CAAC","file":"DateLocationValidator-spec-compiled.js","sourcesContent":["describe(\"DateLocationValidator\", function()\r\n{\r\n    it(\"Passes when null appointment array is passed\",function(){\r\n        let validator  = new DateLocationValidator(null);\r\n        let result = new validator.validate(new AppointmentViewModel());\r\n        expect(result.outcome).toBe(true);\r\n    });\r\n\r\n    it(\"Passes when null appointment array is length 0\",function(){\r\n        let validator  = new DateLocationValidator([]);\r\n        let result = new validator.validate(new AppointmentViewModel());\r\n        expect(result.outcome).toBe(true);\r\n    });\r\n\r\n    it(\"Fails when appointment clashes exactly\",function(){\r\n        try {\r\n            let appointments = [new AppointmentViewModel(1, new Date(2015, 1, 1), new Date(2015, 1, 2))];\r\n            let validator = new DateLocationValidator(appointments);\r\n            let appointmentViewmodel = new AppointmentViewModel(1, new Date(2015, 1, 1), new Date(2015, 1, 2));\r\n            let result = new validator.validate(appointmentViewmodel);\r\n            expect(result.outcome).toBe(false);\r\n        }\r\n        catch(excep){\r\n            console.log(excep)\r\n            expect(true).toBe(false);\r\n        }\r\n    });\r\n});\r\n"]}